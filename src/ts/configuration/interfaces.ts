import { ERROR_CODE, ErrorCode, APP, App } from "../globals"
import { Observable } from "rxjs";

//------------------------- Data types
//-- Resources
export const RESOURCE = {
  FOLDER:     "folder"
 ,BLOG:       "blog"
 ,EXERCISE:   "exercise"
} as const;
export type ResourceType = typeof RESOURCE[keyof typeof RESOURCE];

//------------------------- Data models 
//-------------------------------------
export interface ITheme {
//-------------------------------------
  types:ResourceType[];
  app:App;
  filters:FilterValues;
  orders?:OrderValues;
  search?:String;
}

//-------------------------------------
//------------------- API (HIGH-LEVEL)
//-------------------------------------
/** Configuration capabilities offered by the framework. */
//-------------------------------------
export interface IConfigurationFramework {
//-------------------------------------
  get theme():Observable<ITheme>;
}

/** Context to explore resources from an application. */
//-------------------------------------
export interface IExplorerContext {
//-------------------------------------
  /**
   * @return true, if the context is initialized.
   */
  isInitialized(): boolean;
  /**
   * @return The initialized search context, or undefined if initialize() has not been called before.
   */
  getContext(): IContext|undefined;
  /**
   * @return search parameters in the current context, modifiable before any call to getResources() or initialize().
   */
  getSearchParameters(): ISearchParameters;
  /**
   * @return a flow of objects, generated by initialize() and getResources() which should be called by your searches or pagination.
   */
  latestResources(): Observable<{input:ISearchParameters, output:ISearchResults}>;

  /**
   * Clear and reset the underlying context.
   */
  clear(): void;

  /**
   * Retrieve the first page of listed resources from the server.
   * Observers of the latestResources() will be notified.
   * Search parameters can be adjusted beforehand, @see getSearchParameters().
   * @return 
   */
  initialize(): Promise<IContext>;

  /**
   * Retrieve a page of listed resources from the server.
   * Observers of the latestResources() will be notified.
   * Search parameters can be adjusted beforehand, @see getSearchParameters().
   */
  getResources(): Promise<GetResourcesResult>;

  /**
   * Retrieve subfolders of a parent folder, from the server.
   * @param parentId ID of the parent folder.
   */
  getSubFolders( parentId:ID ): Promise<GetSubFoldersResult>;

  /**
   * Create a new [sub]folder.
   * @param resourceType Type of resources the created folder will contain.
   * @param parentId ID of the parent folder, or "default" for the root folder.
   * @param name Name of the created folder.
   */
  createFolder( resourceType:ResourceType, parentId:ID|"default", name:string ): Promise<CreateFolderResult>;

  /**
   * Modify the properties of a folder.
   * @param folderId ID of the folder to modify.
   * @param resourceType Type of resources the modified folder will contain.
   * @param parentId ID of the parent folder.
   * @param name Name of the folder.
   */
  updateFolder( folderId:ID, resourceType:ResourceType, parentId:ID|"default", name:string ): Promise<UpdateFolderResult>;

  /**
   * Copy resources and folders into a folder.
   * @param targetId ID of the destination folder.
   * @param resourceIds Array of resources ID to copy.
   * @param folderIds Array of folders ID to copy.
   */
  copy( targetId:ID, resourceIds:ID[], folderIds:ID[] ): Promise<void>;

  /**
   * Move resources and folders into a folder.
   * @param targetId ID of the destination folder.
   * @param resourceIds Array of resources ID to move.
   * @param folderIds Array of folders ID to move.
   */
  move( targetId:ID, resourceIds:ID[], folderIds:ID[] ): Promise<void>;

  /**
   * Delete resources and folders.
   * @param resourceIds Array of resources ID to delete.
   * @param folderIds Array of folders ID to delete.
   */
  delete( resourceIds:ID[], folderIds:ID[] ): Promise<void>; //FIXME 1 seul tableau en paramètres ?

  /** Retrieves which properties of the resource(s) are manageable. */
  manageProperties( resourceType:ResourceType, resources:IResource[] ): Promise<ManagePropertiesResult>;
  /** Update managed properties. */
  updateProperties( resourceType:ResourceType, resources:IResource[], props:{[key in PropKeyType]?:string} ): Promise<UpdatePropertiesResult>;

  /* Share resources */
  //share( resourceIds:ID[] /*, rights:IGroupUserRight[]*/ ): Promise<void>;


/*//TODO ajouter des méthodes pour les autres actions du toaster ?
  CREATE:     "create"
 ,OPEN:       "open"
 ,COMMENT:    "comment"
 ,EXPORT:     "export"
 ,PUBLISH:    "publish"
 ,PRINT:      "print"
*/
}

//-------------------------------------
//-------------------- API (LOW-LEVEL)
//-------------------------------------
export interface IBus {
//-------------------------------------
  /** Allows registering an agent as being able to resolve 1 or more action on a type of resource. */
  consumer( res:ResourceType, action:ActionType, agent:IBusAgent ): void;

  /** Allows delegating an action on a type of resource, to a registered agent on the bus. */
  send( res:ResourceType, action:ActionType, parameters:IActionParameters ): Promise<IActionResult>;

  /** Utility function for retrieving an agent. */
  getAgentFor( res:ResourceType, action:ActionType ): IBusAgent|null;
}

//-------------------------------------
export interface IBusAgent {
//-------------------------------------
  /** Ask this agent to resolve an action. */
  activate( res:ResourceType, action:ActionType, parameters:IActionParameters ): Observable<IActionResult>;

// Ou bien, s'il y a besoin de dissocier agents et actions pour permettre plus d'interactions :
/*
  queryActivator( app:App, action:ActionType ): IActivator;
}
export interface IActivator {
  activate( parameters:IActionParameters ): Observable<IActionResult>;
}
*/
}

